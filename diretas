<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Diretas - Memória de Cálculo para Obras</title>

    <!-- Tailwind CSS -->
    <script src="https://cdn.tailwindcss.com"></script>

    <!-- React Libraries -->
    <script src="https://unpkg.com/react@18/umd/react.production.min.js" crossorigin></script>
    <script src="https://unpkg.com/react-dom@18/umd/react-dom.production.min.js" crossorigin></script>
    
    <!-- Babel to transpile JSX in the browser -->
    <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>

    <!-- Libraries for PDF and Excel Export -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf-autotable/3.8.2/jspdf.plugin.autotable.min.js"></script>
    <script src="https://cdn.sheetjs.com/xlsx-0.20.2/package/xlsx.full.min.js"></script>

    <!-- Custom Styles and Fonts -->
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700;800&display=swap');
        body { 
            font-family: 'Inter', sans-serif; 
            -webkit-font-smoothing: antialiased; 
            -moz-osx-font-smoothing: grayscale;
        }
        @keyframes fade-in { 
            from { opacity: 0; transform: translateY(10px); } 
            to { opacity: 1; transform: translateY(0); } 
        }
        .animate-fade-in { animation: fade-in 0.5s ease-out forwards; }
    </style>
</head>
<body class="bg-gray-100">
    <div id="root"></div>

    <script type="text/babel">
        // --- React Application Code Starts Here ---

        const { useState, useEffect } = React;

        // --- Ícones (SVG e Imagem) ---
        const IconeCapacete = () => <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="h-8 w-8 text-white"><path d="M12 2a5 5 0 0 0-5 5v3a5 5 0 0 0 5 5h0a5 5 0 0 0 5-5V7a5 5 0 0 0-5-5Z"></path><path d="M2 17h20"></path></svg>;
        const IconeInfo = () => <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="h-5 w-5 mr-2"><circle cx="12" cy="12" r="10"></circle><line x1="12" y1="16" x2="12" y2="12"></line><line x1="12" y1="8" x2="12.01" y2="8"></line></svg>;
        const IconeDrenagem = () => <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="h-5 w-5 mr-2"><path d="M5 12s2.545-3 7-3c4.455 0 7 3 7 3"></path><path d="M5 18s2.545-3 7-3c4.455 0 7 3 7 3"></path><path d="M5 6s2.545-3 7-3c4.455 0 7 3 7 3"></path></svg>;
        const IconePavimentacao = () => <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="h-5 w-5 mr-2"><path d="M16 18L22 12 16 6"></path><path d="M8 6L2 12 8 18"></path><path d="M12 2V22"></path></svg>;
        const IconeEstruturas = () => <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="h-5 w-5 mr-2"><path d="M2 22h20"></path><path d="M4 22V6.83a2 2 0 0 1 .59-1.42l4.17-4.17a2 2 0 0 1 2.82 0l4.17 4.17a2 2 0 0 1 .59 1.42V22"></path><path d="M12 12h.01"></path><path d="M12 7h.01"></path><path d="M12 17h.01"></path></svg>;
        const IconeServicos = () => <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="h-5 w-5 mr-2"><path d="M14 9.5 22 2l-3 10.5-5.5-3.5L8 22l3.5-5.5Z"></path><path d="m2 2 7.586 7.586"></path></svg>;
        const IconeResumo = () => <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="h-5 w-5 mr-2"><rect x="8" y="2" width="8" height="4" rx="1" ry="1"></rect><path d="M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2"></path><path d="M12 12h.01"></path><path d="M12 17h.01"></path><path d="M12 7h.01"></path></svg>;
        const IconePDF = () => <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="h-5 w-5 mr-2"><path d="M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z"></path><polyline points="14 2 14 8 20 8"></polyline><path d="M10 18v-4h1a2 2 0 0 0 2-2v0a2 2 0 0 0-2-2h-1V8"></path><path d="M17 18h-2.5a1.5 1.5 0 0 1 0-3h1a1.5 1.5 0 0 0 0-3H14v6"></path></svg>;
        const IconePlanilha = () => <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="h-5 w-5 mr-2"><path d="M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z"></path><polyline points="14 2 14 8 20 8"></polyline><line x1="12" y1="18" x2="12" y2="12"></line><line x1="9" y1="15" x2="15" y2="15"></line></svg>;
        const IconeAdicionar = () => <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="h-5 w-5 mr-2"><path d="M5 12h14"></path><path d="M12 5v14"></path></svg>;
        const IconeLixeira = () => <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="h-4 w-4 mr-2"><path d="M3 6h18"></path><path d="M19 6v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6m3 0V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2"></path></svg>;

        // --- Base de Dados de Coeficientes ---
        const COEFICIENTES = {
            aco: { '5': 0.154, '6.3': 0.245, '8': 0.395, '10': 0.617, '12.5': 0.963, '16': 1.578, arameQueimadoFator: 0.015 },
            drenagem: { calafetacaoAreia: 0.009, calafetacaoCimento: 0.6, distanciaJuntas: 1 },
            caixaPassagem: { assentamentoBlocoAreia: 0.045, assentamentoBlocoCimento: 18, chapiscoAreia: 0.02, chapiscoCimento: 6, emocoAreia: 0.03, emocoCimento: 12, dimensaoBloco: 0.08, acoPorMetroCubico: 85, calafetacaoTampaCimento: 2.5, calafetacaoTampaAreia: 0.005 },
            meioFio: { assentamentoPoPedra: 0.02, assentamentoBrita: 0.02, juntaAreia: 0.006, juntaCimento: 0.9, distanciaJuntas: 2 },
            calcada: { baseSaibroEspessura: 0.08, concretoEspessura: 0.1, pregoPorMetroForma: 0.05 },
            calcadaIntertravado: { baseSaibroEspessura: 0.05, assentamentoPoPedraEspessura: 0.03 },
            alvenaria: { blocosPorM2: { '9x19x39': 12.5, '14x19x39': 12.5 }, assentamentoAreia: 0.015, assentamentoCimento: 6, chapiscoAreia: 0.005, chapiscoCimento: 2.5, emocoAreia: 0.02, emocoCimento: 10 },
            servicos: { empolamentoSolo: 1.25, baseRachaoEspessura: 0.1, reaterroBritaEspessura: 0.1 }
        };

        // --- Componente Genérico de Card de Formulário ---
        const FormCard = ({ title, children, onCalcular }) => (
            <div className="bg-white border border-gray-200 rounded-xl shadow-sm overflow-hidden mb-6">
                <div className="p-4 border-b border-gray-200"><h3 className="font-bold text-lg text-gray-800">{title}</h3></div>
                <div className="p-4 space-y-4">{children}</div>
                <div className="p-4 bg-gray-50 border-t border-gray-200">
                    <button onClick={onCalcular} className="w-full flex items-center justify-center bg-red-800 hover:bg-red-900 text-white py-2.5 rounded-lg font-bold transition-all duration-200 transform hover:scale-[1.02]">
                        <IconeAdicionar /> Adicionar ao Resumo
                    </button>
                </div>
            </div>
        );

        // --- Componente para Informações da Obra ---
        function InfoObraPage({ info, setInfo }) {
            const handleInputChange = (e) => {
                const { name, value } = e.target;
                setInfo(prev => ({ ...prev, [name]: value }));
            };
            return (
                <div className="animate-fade-in">
                    <div className="bg-white border border-gray-200 rounded-xl shadow-sm overflow-hidden">
                        <div className="p-4 border-b"><h3 className="font-bold text-lg text-gray-800">Informações da Obra para Relatório</h3></div>
                        <div className="p-4 space-y-4">
                            <input type="text" name="os" value={info.os} onChange={handleInputChange} placeholder="Nº da O.S." className="w-full border-gray-300 rounded-md p-2 shadow-sm focus:ring-red-800 focus:border-red-800" />
                            <input type="text" name="descricao" value={info.descricao} onChange={handleInputChange} placeholder="Descrição do Serviço" className="w-full border-gray-300 rounded-md p-2 shadow-sm focus:ring-red-800 focus:border-red-800" />
                            <input type="text" name="encarregado" value={info.encarregado} onChange={handleInputChange} placeholder="Encarregado" className="w-full border-gray-300 rounded-md p-2 shadow-sm focus:ring-red-800 focus:border-red-800" />
                            <input type="text" name="endereco" value={info.endereco} onChange={handleInputChange} placeholder="Endereço da Obra" className="w-full border-gray-300 rounded-md p-2 shadow-sm focus:ring-red-800 focus:border-red-800" />
                        </div>
                         <div className="p-4 bg-gray-50 border-t text-center text-sm text-gray-500">
                            <p>Preencha estes campos para que apareçam nos seus relatórios.</p>
                        </div>
                    </div>
                </div>
            );
        }
        
        // --- Componente para Resumo Recente ---
        const ResumoRecente = ({ item, onClose }) => {
            if (!item) return null;
            return (
                <div className="fixed bottom-0 left-1/2 -translate-x-1/2 w-full max-w-4xl p-4 z-50 animate-fade-in">
                    <div className="bg-white border-2 border-red-800 rounded-xl shadow-2xl overflow-hidden">
                        <div className="p-4 border-b bg-gray-50 flex justify-between items-center">
                            <h3 className="font-bold text-lg text-gray-800">Último Item Adicionado: <span className="text-red-800">{item.origem}</span></h3>
                            <button onClick={onClose} className="text-gray-400 hover:text-gray-600 text-2xl font-bold">&times;</button>
                        </div>
                        <div className="p-4 max-h-48 overflow-y-auto">
                            {item.materiais.map(({ nome, quantidade, unidade }) => (
                                <div key={nome} className="grid grid-cols-3 items-center py-1 text-sm">
                                    <span className="col-span-2 text-gray-700">{nome}</span>
                                    <span className="text-right font-mono text-gray-600">{quantidade.toFixed(2)} {unidade}</span>
                                </div>
                            ))}
                        </div>
                    </div>
                </div>
            );
        };

        // --- Calculadoras Específicas ---
        function RedeDrenagemForm({ onCalcular }) {
            const [extensao, setExtensao] = useState('');
            const [diametroTubo, setDiametroTubo] = useState(300);
            const calcular = () => {
                const ext = parseFloat(extensao);
                if (isNaN(ext) || ext <= 0) { alert("Insira uma extensão válida."); return; }
                const { drenagem } = COEFICIENTES;
                const numJuntas = ext / drenagem.distanciaJuntas;
                const materiais = [
                    { nome: `Tubo de Concreto PA-1 Ø${diametroTubo}mm`, quantidade: ext, unidade: 'm', categoria: 'Drenagem' },
                    { nome: 'Areia para Calafetação de Tubos', quantidade: numJuntas * drenagem.calafetacaoAreia, unidade: 'm³', categoria: 'Drenagem' },
                    { nome: 'Cimento para Calafetação de Tubos', quantidade: numJuntas * drenagem.calafetacaoCimento, unidade: 'kg', categoria: 'Drenagem' },
                ];
                onCalcular('Rede de Tubulação', materiais);
                setExtensao('');
            };
            return (
                <FormCard title="1. Rede de Tubulação" onCalcular={calcular}>
                    <div className="grid md:grid-cols-2 gap-4">
                        <input type="number" value={extensao} onChange={e => setExtensao(e.target.value)} placeholder="Extensão da Rede (m)" className="w-full border-gray-300 rounded-md p-2 shadow-sm focus:ring-red-800 focus:border-red-800" />
                        <select value={diametroTubo} onChange={e => setDiametroTubo(Number(e.target.value))} className="w-full border-gray-300 rounded-md p-2 bg-white shadow-sm focus:ring-red-800 focus:border-red-800">
                            {[300, 400, 600, 800, 1000, 1200].map(d => <option key={d} value={d}>Tubo de {d}mm</option>)}
                        </select>
                    </div>
                </FormCard>
            );
        }

        function CaixaPassagemForm({ onCalcular }) {
            const [qtd, setQtd] = useState('');
            const [largura, setLargura] = useState(1.2);
            const [profundidade, setProfundidade] = useState(1.5);
            const [tipoTampa, setTipoTampa] = useState('concreto');
            const [fckConcreto, setFckConcreto] = useState(25);
            const [aneis, setAneis] = useState('');
            const [calafetarTampa, setCalafetarTampa] = useState(false);

            const calcular = () => {
                const numCaixas = parseInt(qtd);
                const larg = parseFloat(largura);
                const prof = parseFloat(profundidade);
                if (isNaN(numCaixas) || isNaN(larg) || isNaN(prof) || numCaixas <= 0) { alert("Insira valores válidos."); return; }
                const { caixaPassagem, aco } = COEFICIENTES;
                const areaParedeCaixa = larg * 4 * prof;
                const areaTotalParedes = areaParedeCaixa * numCaixas;
                const volumeRadier = larg * larg * 0.15;
                const volumeTotalRadier = volumeRadier * numCaixas;
                const pesoAcoRadier = volumeTotalRadier * caixaPassagem.acoPorMetroCubico;
                const materiais = [
                    { nome: 'Bloco de Concreto 19x19x39cm', quantidade: areaTotalParedes / caixaPassagem.dimensaoBloco, unidade: 'un', categoria: 'Drenagem' },
                    { nome: 'Areia p/ Assentamento de Bloco (PV)', quantidade: areaTotalParedes * caixaPassagem.assentamentoBlocoAreia, unidade: 'm³', categoria: 'Drenagem' },
                    { nome: 'Cimento p/ Assentamento de Bloco (PV)', quantidade: areaTotalParedes * caixaPassagem.assentamentoBlocoCimento, unidade: 'kg', categoria: 'Drenagem' },
                    { nome: 'Areia p/ Chapisco Interno (PV)', quantidade: areaTotalParedes * caixaPassagem.chapiscoAreia, unidade: 'm³', categoria: 'Drenagem' },
                    { nome: 'Cimento p/ Chapisco Interno (PV)', quantidade: areaTotalParedes * caixaPassagem.chapiscoCimento, unidade: 'kg', categoria: 'Drenagem' },
                    { nome: 'Areia p/ Emboço Interno (PV)', quantidade: areaTotalParedes * caixaPassagem.emocoAreia, unidade: 'm³', categoria: 'Drenagem' },
                    { nome: 'Cimento p/ Emboço Interno (PV)', quantidade: areaTotalParedes * caixaPassagem.emocoCimento, unidade: 'kg', categoria: 'Drenagem' },
                    { nome: `Concreto Usinado FCK ${fckConcreto}MPa p/ Radier (PV)`, quantidade: volumeTotalRadier, unidade: 'm³', categoria: 'Drenagem' },
                    { nome: 'Aço CA-50/60 p/ Radier (PV)', quantidade: pesoAcoRadier, unidade: 'kg', categoria: 'Estruturas' },
                    { nome: 'Arame Queimado p/ Radier (PV)', quantidade: pesoAcoRadier * aco.arameQueimadoFator, unidade: 'kg', categoria: 'Estruturas' },
                    { nome: tipoTampa === 'concreto' ? `Tampa de Concreto Armado ${larg}x${larg}m` : 'Tampão de Ferro Fundido Articulado', quantidade: numCaixas, unidade: 'un', categoria: 'Drenagem' }
                ];
                if (parseInt(aneis) > 0) {
                    materiais.push({ nome: 'Anel Prolongador de PV', quantidade: parseInt(aneis), unidade: 'un', categoria: 'Drenagem' });
                }
                if (calafetarTampa) {
                    materiais.push({ nome: 'Cimento p/ Calafetar Tampa', quantidade: numCaixas * caixaPassagem.calafetacaoTampaCimento, unidade: 'kg', categoria: 'Drenagem' });
                    materiais.push({ nome: 'Areia p/ Calafetar Tampa', quantidade: numCaixas * caixaPassagem.calafetacaoTampaAreia, unidade: 'm³', categoria: 'Drenagem' });
                }
                onCalcular('Caixas de Passagem', materiais);
                setQtd(''); setAneis('');
            };
            return (
                <FormCard title="2. Caixas de Passagem (PV)" onCalcular={calcular}>
                    <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-4">
                        <input type="number" value={qtd} onChange={e => setQtd(e.target.value)} placeholder="Quantidade (un)" className="w-full border-gray-300 rounded-md p-2 shadow-sm focus:ring-red-800 focus:border-red-800" />
                        <input type="number" value={largura} onChange={e => setLargura(e.target.value)} placeholder="Largura (m)" className="w-full border-gray-300 rounded-md p-2 shadow-sm focus:ring-red-800 focus:border-red-800" />
                        <input type="number" value={profundidade} onChange={e => setProfundidade(e.target.value)} placeholder="Profundidade (m)" className="w-full border-gray-300 rounded-md p-2 shadow-sm focus:ring-red-800 focus:border-red-800" />
                        <select value={tipoTampa} onChange={e => setTipoTampa(e.target.value)} className="w-full border-gray-300 rounded-md p-2 bg-white shadow-sm focus:ring-red-800 focus:border-red-800">
                            <option value="concreto">Tampa de Concreto</option><option value="ferro">Tampão F. Fundido</option>
                        </select>
                        <select value={fckConcreto} onChange={e => setFckConcreto(e.target.value)} className="w-full border-gray-300 rounded-md p-2 bg-white shadow-sm focus:ring-red-800 focus:border-red-800">
                            <option value={20}>FCK 20MPa</option><option value={25}>FCK 25MPa</option><option value={30}>FCK 30MPa</option>
                        </select>
                         <input type="number" value={aneis} onChange={e => setAneis(e.target.value)} placeholder="Anéis Prolongadores (un)" className="w-full border-gray-300 rounded-md p-2 shadow-sm focus:ring-red-800 focus:border-red-800" />
                    </div>
                    <div className="flex items-center mt-2">
                        <input id="calafetarTampa" type="checkbox" checked={calafetarTampa} onChange={e => setCalafetarTampa(e.target.checked)} className="h-4 w-4 text-red-800 border-gray-300 rounded focus:ring-red-800" />
                        <label htmlFor="calafetarTampa" className="ml-2 block text-sm text-gray-900">Incluir Calafetação da Tampa</label>
                    </div>
                </FormCard>
            );
        }

        function CaixaColetoraForm({ onCalcular }) {
            const [qtd, setQtd] = useState('');
            const [largura, setLargura] = useState(0.6);
            const [profundidade, setProfundidade] = useState(0.8);
            const calcular = () => {
                const numCaixas = parseInt(qtd);
                const larg = parseFloat(largura);
                const prof = parseFloat(profundidade);
                if (isNaN(numCaixas) || isNaN(larg) || isNaN(prof) || numCaixas <= 0) { alert("Insira valores válidos."); return; }
                const { caixaPassagem, aco } = COEFICIENTES; // Reutilizando coeficientes
                const areaParedeCaixa = larg * 4 * prof;
                const areaTotalParedes = areaParedeCaixa * numCaixas;
                const volumeRadier = larg * larg * 0.10; // Radier de 10cm
                const volumeTotalRadier = volumeRadier * numCaixas;
                const pesoAcoRadier = volumeTotalRadier * caixaPassagem.acoPorMetroCubico;
                const materiais = [
                    { nome: 'Bloco de Concreto 9x19x39cm', quantidade: areaTotalParedes / caixaPassagem.dimensaoBloco, unidade: 'un', categoria: 'Drenagem' },
                    { nome: 'Areia p/ Assentamento de Bloco (BL)', quantidade: areaTotalParedes * caixaPassagem.assentamentoBlocoAreia, unidade: 'm³', categoria: 'Drenagem' },
                    { nome: 'Cimento p/ Assentamento de Bloco (BL)', quantidade: areaTotalParedes * caixaPassagem.assentamentoBlocoCimento, unidade: 'kg', categoria: 'Drenagem' },
                    { nome: 'Areia p/ Chapisco Interno (BL)', quantidade: areaTotalParedes * caixaPassagem.chapiscoAreia, unidade: 'm³', categoria: 'Drenagem' },
                    { nome: 'Cimento p/ Chapisco Interno (BL)', quantidade: areaTotalParedes * caixaPassagem.chapiscoCimento, unidade: 'kg', categoria: 'Drenagem' },
                    { nome: 'Areia p/ Emboço Interno (BL)', quantidade: areaTotalParedes * caixaPassagem.emocoAreia, unidade: 'm³', categoria: 'Drenagem' },
                    { nome: 'Cimento p/ Emboço Interno (BL)', quantidade: areaTotalParedes * caixaPassagem.emocoCimento, unidade: 'kg', categoria: 'Drenagem' },
                    { nome: `Concreto Usinado FCK 20MPa p/ Radier (BL)`, quantidade: volumeTotalRadier, unidade: 'm³', categoria: 'Drenagem' },
                    { nome: 'Aço CA-50/60 p/ Radier (BL)', quantidade: pesoAcoRadier, unidade: 'kg', categoria: 'Estruturas' },
                    { nome: 'Arame Queimado p/ Radier (BL)', quantidade: pesoAcoRadier * aco.arameQueimadoFator, unidade: 'kg', categoria: 'Estruturas' },
                    { nome: 'Grelha de Ferro Fundido', quantidade: numCaixas, unidade: 'un', categoria: 'Drenagem' },
                    { nome: 'Meio-fio Vazado (Boca de Lobo)', quantidade: numCaixas, unidade: 'un', categoria: 'Drenagem' },
                ];
                onCalcular('Caixas Coletoras', materiais);
                setQtd('');
            };
            return (
                <FormCard title="3. Caixas Coletoras (Boca de Lobo)" onCalcular={calcular}>
                     <div className="grid md:grid-cols-3 gap-4">
                        <input type="number" value={qtd} onChange={e => setQtd(e.target.value)} placeholder="Quantidade (un)" className="w-full border-gray-300 rounded-md p-2 shadow-sm focus:ring-red-800 focus:border-red-800" />
                        <input type="number" value={largura} onChange={e => setLargura(e.target.value)} placeholder="Largura Interna (m)" className="w-full border-gray-300 rounded-md p-2 shadow-sm focus:ring-red-800 focus:border-red-800" />
                        <input type="number" value={profundidade} onChange={e => setProfundidade(e.target.value)} placeholder="Profundidade (m)" className="w-full border-gray-300 rounded-md p-2 shadow-sm focus:ring-red-800 focus:border-red-800" />
                    </div>
                </FormCard>
            );
        }

        function MeioFioForm({ onCalcular }) {
            const [extensao, setExtensao] = useState('');
            const [lados, setLados] = useState(2);
            const [baseMaterial, setBaseMaterial] = useState('po_pedra');
            const calcular = () => {
                const ext = parseFloat(extensao);
                const numLados = parseInt(lados);
                if (isNaN(ext) || ext <= 0) { alert("Insira uma extensão válida."); return; }
                const { meioFio } = COEFICIENTES;
                const extTotal = ext * numLados;
                const numJuntas = extTotal / meioFio.distanciaJuntas;
                const materiais = [
                    { nome: 'Meio-fio de Concreto Pré-moldado', quantidade: extTotal, unidade: 'm', categoria: 'Pavimentação' },
                    { nome: 'Areia para Junta de Meio-fio', quantidade: numJuntas * meioFio.juntaAreia, unidade: 'm³', categoria: 'Pavimentação' },
                    { nome: 'Cimento para Junta de Meio-fio', quantidade: numJuntas * meioFio.juntaCimento, unidade: 'kg', categoria: 'Pavimentação' },
                ];
                if (baseMaterial === 'po_pedra') {
                    materiais.push({ nome: 'Pó de Pedra para Assentamento de Meio-fio', quantidade: extTotal * meioFio.assentamentoPoPedra, unidade: 'm³', categoria: 'Pavimentação' });
                } else {
                    materiais.push({ nome: 'Brita Graduada para Assentamento de Meio-fio', quantidade: extTotal * meioFio.assentamentoBrita, unidade: 'm³', categoria: 'Pavimentação' });
                }
                onCalcular('Meio-fio', materiais);
                setExtensao('');
            };
            return (
                <FormCard title="1. Meio-fio" onCalcular={calcular}>
                    <div className="grid md:grid-cols-3 gap-4">
                        <input type="number" value={extensao} onChange={e => setExtensao(e.target.value)} placeholder="Extensão da Rua (m)" className="w-full border-gray-300 rounded-md p-2 shadow-sm focus:ring-red-800 focus:border-red-800" />
                        <select value={lados} onChange={e => setLados(Number(e.target.value))} className="w-full border-gray-300 rounded-md p-2 bg-white shadow-sm focus:ring-red-800 focus:border-red-800">
                            <option value={1}>1 Lado da Rua</option><option value={2}>2 Lados da Rua</option>
                        </select>
                        <select value={baseMaterial} onChange={e => setBaseMaterial(e.target.value)} className="w-full border-gray-300 rounded-md p-2 bg-white shadow-sm focus:ring-red-800 focus:border-red-800">
                            <option value="po_pedra">Base: Pó de Pedra</option><option value="brita">Base: Brita Graduada</option>
                        </select>
                    </div>
                </FormCard>
            );
        }

        function CalcadaConcretoForm({ onCalcular }) {
            const [extensao, setExtensao] = useState('');
            const [largura, setLargura] = useState(2.0);
            const [lados, setLados] = useState(2);
            const [incluirTatil, setIncluirTatil] = useState(false);
            const [fckConcreto, setFckConcreto] = useState(20);
            const calcular = () => {
                const ext = parseFloat(extensao);
                const larg = parseFloat(largura);
                const numLados = parseInt(lados);
                if (isNaN(ext) || isNaN(larg) || ext <= 0 || larg <= 0) { alert("Insira valores válidos."); return; }
                const { calcada } = COEFICIENTES;
                const areaTotal = ext * larg * numLados;
                const perimetroForma = ext * numLados;
                const materiais = [
                    { nome: 'Saibro para Base da Calçada', quantidade: areaTotal * calcada.baseSaibroEspessura, unidade: 'm³', categoria: 'Pavimentação' },
                    { nome: `Concreto Usinado FCK ${fckConcreto}MPa para Calçada`, quantidade: areaTotal * calcada.concretoEspessura, unidade: 'm³', categoria: 'Pavimentação' },
                    { nome: 'Malha POP Leve (15x15cm)', quantidade: areaTotal / 6, unidade: 'un', categoria: 'Estruturas' },
                    { nome: 'Tábua de 30cm para Sarrafo/Forma', quantidade: perimetroForma, unidade: 'm', categoria: 'Pavimentação' },
                    { nome: 'Prego 17x27', quantidade: perimetroForma * calcada.pregoPorMetroForma, unidade: 'kg', categoria: 'Pavimentação' }
                ];
                if (incluirTatil) {
                    materiais.push({ nome: 'Piso Tátil de Alerta/Direcional', quantidade: perimetroForma, unidade: 'm', categoria: 'Pavimentação' });
                }
                onCalcular('Calçada de Concreto', materiais);
                setExtensao('');
            };
            return (
                <FormCard title="2. Calçada de Concreto" onCalcular={calcular}>
                    <div className="grid md:grid-cols-2 lg:grid-cols-4 gap-4">
                        <input type="number" value={extensao} onChange={e => setExtensao(e.target.value)} placeholder="Extensão (m)" className="w-full border-gray-300 rounded-md p-2 shadow-sm focus:ring-red-800 focus:border-red-800" />
                        <input type="number" value={largura} onChange={e => setLargura(e.target.value)} placeholder="Largura (m)" className="w-full border-gray-300 rounded-md p-2 shadow-sm focus:ring-red-800 focus:border-red-800" />
                        <select value={lados} onChange={e => setLados(Number(e.target.value))} className="w-full border-gray-300 rounded-md p-2 bg-white shadow-sm focus:ring-red-800 focus:border-red-800">
                            <option value={1}>1 Lado</option><option value={2}>2 Lados</option>
                        </select>
                        <select value={fckConcreto} onChange={e => setFckConcreto(e.target.value)} className="w-full border-gray-300 rounded-md p-2 bg-white shadow-sm focus:ring-red-800 focus:border-red-800">
                            <option value={15}>FCK 15MPa</option><option value={20}>FCK 20MPa</option><option value={25}>FCK 25MPa</option>
                        </select>
                    </div>
                    <div className="flex items-center mt-2">
                        <input id="pisoTatil" type="checkbox" checked={incluirTatil} onChange={e => setIncluirTatil(e.target.checked)} className="h-4 w-4 text-red-800 border-gray-300 rounded focus:ring-red-800" />
                        <label htmlFor="pisoTatil" className="ml-2 block text-sm text-gray-900">Incluir Piso Tátil</label>
                    </div>
                </FormCard>
            );
        }

        function CalcadaIntertravadoForm({ onCalcular }) {
            const [area, setArea] = useState('');
            const calcular = () => {
                const areaNum = parseFloat(area);
                if (isNaN(areaNum) || areaNum <= 0) { alert("Insira uma área válida."); return; }
                const { calcadaIntertravado } = COEFICIENTES;
                const materiais = [
                    { nome: 'Piso Intertravado de Concreto', quantidade: areaNum, unidade: 'm²', categoria: 'Pavimentação' },
                    { nome: 'Pó de Pedra para Assentamento de Intertravado', quantidade: areaNum * calcadaIntertravado.assentamentoPoPedraEspessura, unidade: 'm³', categoria: 'Pavimentação' },
                    { nome: 'Saibro para Base do Intertravado', quantidade: areaNum * calcadaIntertravado.baseSaibroEspessura, unidade: 'm³', categoria: 'Pavimentação' },
                ];
                onCalcular('Calçada de Intertravado', materiais);
                setArea('');
            };
            return (
                <FormCard title="3. Calçada de Intertravado" onCalcular={calcular}>
                    <input type="number" value={area} onChange={e => setArea(e.target.value)} placeholder="Área Total (m²)" className="w-full border-gray-300 rounded-md p-2 shadow-sm focus:ring-red-800 focus:border-red-800" />
                </FormCard>
            );
        }

        function AcoForm({ onCalcular }) {
            const [tipo, setTipo] = useState('viga');
            const [comp, setComp] = useState('');
            const [larg, setLarg] = useState('');
            const [alt, setAlt] = useState('');
            const [qtd, setQtd] = useState(1);
            const [bitolaPrincipal, setBitolaPrincipal] = useState('10');
            const [numBarrasPrincipal, setNumBarrasPrincipal] = useState(4);
            const [bitolaEstribo, setBitolaEstribo] = useState('5');
            const [espacamentoEstribo, setEspacamentoEstribo] = useState(0.2);
            const calcular = () => {
                const C = parseFloat(comp); const L = parseFloat(larg); const A = parseFloat(alt); const Q = parseInt(qtd);
                if (isNaN(C) || isNaN(L) || isNaN(A) || isNaN(Q)) { alert("Preencha todas as dimensões e quantidades."); return; }
                const materiais = [];
                const cobrimento = 0.05;
                const comprimentoTotalPrincipal = C * numBarrasPrincipal * Q;
                const pesoTotalPrincipal = comprimentoTotalPrincipal * COEFICIENTES.aco[bitolaPrincipal];
                let pesoTotalEstribos = 0;
                materiais.push({ nome: `Aço CA-50 Ø${bitolaPrincipal}mm (Principal)`, quantidade: pesoTotalPrincipal, unidade: 'kg', categoria: 'Estruturas' });
                materiais.push({ nome: `Vara Aço Ø${bitolaPrincipal}mm (12m)`, quantidade: comprimentoTotalPrincipal / 12, unidade: 'un', categoria: 'Estruturas' });
                if (tipo !== 'laje') {
                    const perimetroEstribo = (L - cobrimento) * 2 + (A - cobrimento) * 2;
                    const numEstribos = Math.ceil(C / espacamentoEstribo);
                    const comprimentoTotalEstribos = perimetroEstribo * numEstribos * Q;
                    pesoTotalEstribos = comprimentoTotalEstribos * COEFICIENTES.aco[bitolaEstribo];
                    materiais.push({ nome: `Aço CA-50 Ø${bitolaEstribo}mm (Estribo)`, quantidade: pesoTotalEstribos, unidade: 'kg', categoria: 'Estruturas' });
                    materiais.push({ nome: `Vara Aço Ø${bitolaEstribo}mm (12m)`, quantidade: comprimentoTotalEstribos / 12, unidade: 'un', categoria: 'Estruturas' });
                }
                const pesoTotalAco = pesoTotalPrincipal + pesoTotalEstribos;
                materiais.push({ nome: 'Arame Queimado', quantidade: pesoTotalAco * COEFICIENTES.aco.arameQueimadoFator, unidade: 'kg', categoria: 'Estruturas' });
                onCalcular(`Ferragem ${tipo}`, materiais);
            };
            return (
                <FormCard title="1. Ferragens (Aço)" onCalcular={calcular}>
                    <div className="grid md:grid-cols-3 gap-4">
                        <select value={tipo} onChange={e => setTipo(e.target.value)} className="w-full border-gray-300 rounded-md p-2 bg-white shadow-sm focus:ring-red-800 focus:border-red-800">
                            <option value="viga">Viga</option><option value="pilar">Pilar</option><option value="laje">Laje/Radier</option>
                        </select>
                         <input type="number" value={qtd} onChange={e => setQtd(e.target.value)} placeholder="Quantidade (un)" className="w-full border-gray-300 rounded-md p-2 shadow-sm focus:ring-red-800 focus:border-red-800" />
                    </div>
                    <div className="grid md:grid-cols-3 gap-4">
                        <input type="number" value={comp} onChange={e => setComp(e.target.value)} placeholder="Comprimento (m)" className="w-full border-gray-300 rounded-md p-2 shadow-sm focus:ring-red-800 focus:border-red-800" />
                        <input type="number" value={larg} onChange={e => setLarg(e.target.value)} placeholder="Largura (m)" className="w-full border-gray-300 rounded-md p-2 shadow-sm focus:ring-red-800 focus:border-red-800" />
                        <input type="number" value={alt} onChange={e => setAlt(e.target.value)} placeholder="Altura (m)" className="w-full border-gray-300 rounded-md p-2 shadow-sm focus:ring-red-800 focus:border-red-800" />
                    </div>
                    <div className="p-4 border-t border-b border-gray-200 space-y-4">
                        <h4 className="font-semibold text-gray-700">Armadura Principal</h4>
                        <div className="grid md:grid-cols-2 gap-4">
                            <select value={bitolaPrincipal} onChange={e => setBitolaPrincipal(e.target.value)} className="w-full border-gray-300 rounded-md p-2 bg-white shadow-sm focus:ring-red-800 focus:border-red-800">
                                {Object.keys(COEFICIENTES.aco).filter(k=>k!=='arameQueimadoFator').map(b => <option key={b} value={b}>Bitola Ø{b}mm</option>)}
                            </select>
                            <input type="number" value={numBarrasPrincipal} onChange={e => setNumBarrasPrincipal(e.target.value)} placeholder="Nº de Barras" className="w-full border-gray-300 rounded-md p-2 shadow-sm focus:ring-red-800 focus:border-red-800" />
                        </div>
                    </div>
                    {tipo !== 'laje' && (
                        <div className="p-4 space-y-4">
                            <h4 className="font-semibold text-gray-700">Estribos</h4>
                            <div className="grid md:grid-cols-2 gap-4">
                                <select value={bitolaEstribo} onChange={e => setBitolaEstribo(e.target.value)} className="w-full border-gray-300 rounded-md p-2 bg-white shadow-sm focus:ring-red-800 focus:border-red-800">
                                    {Object.keys(COEFICIENTES.aco).filter(k=>k!=='arameQueimadoFator').map(b => <option key={b} value={b}>Bitola Ø{b}mm</option>)}
                                </select>
                                <input type="number" value={espacamentoEstribo} onChange={e => setEspacamentoEstribo(e.target.value)} placeholder="Espaçamento (m)" className="w-full border-gray-300 rounded-md p-2 shadow-sm focus:ring-red-800 focus:border-red-800" />
                            </div>
                        </div>
                    )}
                </FormCard>
            );
        }

        function AlvenariaForm({ onCalcular }) {
            const [comprimento, setComprimento] = useState('');
            const [altura, setAltura] = useState('');
            const [tipoBloco, setTipoBloco] = useState('9x19x39');
            const calcular = () => {
                const comp = parseFloat(comprimento);
                const alt = parseFloat(altura);
                if (isNaN(comp) || isNaN(alt) || comp <= 0 || alt <= 0) { alert("Insira valores válidos."); return; }
                const { alvenaria } = COEFICIENTES;
                const areaTotal = comp * alt;
                const materiais = [
                    { nome: `Bloco de Concreto ${tipoBloco}cm`, quantidade: areaTotal * alvenaria.blocosPorM2[tipoBloco], unidade: 'un', categoria: 'Estruturas' },
                    { nome: 'Areia p/ Assentamento de Alvenaria', quantidade: areaTotal * alvenaria.assentamentoAreia, unidade: 'm³', categoria: 'Estruturas' },
                    { nome: 'Cimento p/ Assentamento de Alvenaria', quantidade: areaTotal * alvenaria.assentamentoCimento, unidade: 'kg', categoria: 'Estruturas' },
                    { nome: 'Areia p/ Chapisco de Alvenaria', quantidade: areaTotal * alvenaria.chapiscoAreia * 2, unidade: 'm³', categoria: 'Estruturas' }, // 2 lados
                    { nome: 'Cimento p/ Chapisco de Alvenaria', quantidade: areaTotal * alvenaria.chapiscoCimento * 2, unidade: 'kg', categoria: 'Estruturas' }, // 2 lados
                    { nome: 'Areia p/ Emboço de Alvenaria', quantidade: areaTotal * alvenaria.emocoAreia * 2, unidade: 'm³', categoria: 'Estruturas' }, // 2 lados
                    { nome: 'Cimento p/ Emboço de Alvenaria', quantidade: areaTotal * alvenaria.emocoCimento * 2, unidade: 'kg', categoria: 'Estruturas' }, // 2 lados
                ];
                onCalcular('Muro de Alvenaria', materiais);
                setComprimento(''); setAltura('');
            };
            return (
                <FormCard title="2. Muro de Alvenaria" onCalcular={calcular}>
                    <div className="grid md:grid-cols-3 gap-4">
                        <input type="number" value={comprimento} onChange={e => setComprimento(e.target.value)} placeholder="Comprimento (m)" className="w-full border-gray-300 rounded-md p-2 shadow-sm focus:ring-red-800 focus:border-red-800" />
                        <input type="number" value={altura} onChange={e => setAltura(e.target.value)} placeholder="Altura (m)" className="w-full border-gray-300 rounded-md p-2 shadow-sm focus:ring-red-800 focus:border-red-800" />
                        <select value={tipoBloco} onChange={e => setTipoBloco(e.target.value)} className="w-full border-gray-300 rounded-md p-2 bg-white shadow-sm focus:ring-red-800 focus:border-red-800">
                            <option value="9x19x39">Bloco 9x19x39</option><option value="14x19x39">Bloco 14x19x39</option>
                        </select>
                    </div>
                </FormCard>
            );
        }

        function EscavacaoForm({ onCalcular }) {
            const [comprimento, setComprimento] = useState('');
            const [largura, setLargura] = useState('');
            const [profundidade, setProfundidade] = useState('');
            const calcular = () => {
                const comp = parseFloat(comprimento);
                const larg = parseFloat(largura);
                const prof = parseFloat(profundidade);
                if (isNaN(comp) || isNaN(larg) || isNaN(prof)) { alert("Insira valores válidos."); return; }
                const volumeTotal = comp * larg * prof;
                const materiais = [
                    { nome: `Escavação Mecanizada`, quantidade: volumeTotal, unidade: 'm³', categoria: 'Serviços' },
                    { nome: `Reaterro e Compactação`, quantidade: volumeTotal, unidade: 'm³', categoria: 'Serviços' },
                    { nome: `Remoção de Material Excedente (Bota-Fora)`, quantidade: volumeTotal * (COEFICIENTES.servicos.empolamentoSolo - 1), unidade: 'm³', categoria: 'Serviços' },
                ];
                onCalcular('Escavação e Reaterro', materiais);
                setComprimento(''); setLargura(''); setProfundidade('');
            };
            return (
                <FormCard title="1. Escavação e Reaterro" onCalcular={calcular}>
                    <div className="grid md:grid-cols-3 gap-4">
                        <input type="number" value={comprimento} onChange={e => setComprimento(e.target.value)} placeholder="Comprimento (m)" className="w-full border-gray-300 rounded-md p-2 shadow-sm focus:ring-red-800 focus:border-red-800" />
                        <input type="number" value={largura} onChange={e => setLargura(e.target.value)} placeholder="Largura (m)" className="w-full border-gray-300 rounded-md p-2 shadow-sm focus:ring-red-800 focus:border-red-800" />
                        <input type="number" value={profundidade} onChange={e => setProfundidade(e.target.value)} placeholder="Profundidade (m)" className="w-full border-gray-300 rounded-md p-2 shadow-sm focus:ring-red-800 focus:border-red-800" />
                    </div>
                </FormCard>
            );
        }
        
        function BaseGranularForm({ onCalcular }) {
            const [comprimento, setComprimento] = useState('');
            const [largura, setLargura] = useState('');
            const [espessura, setEspessura] = useState(0.1);
            const [material, setMaterial] = useState('rachao');
            const calcular = () => {
                const comp = parseFloat(comprimento);
                const larg = parseFloat(largura);
                const esp = parseFloat(espessura);
                if (isNaN(comp) || isNaN(larg) || isNaN(esp)) { alert("Insira valores válidos."); return; }
                const volumeTotal = comp * larg * esp;
                const materiais = [
                    { nome: material === 'rachao' ? 'Base de Rachão' : 'Base de Brita Graduada', quantidade: volumeTotal, unidade: 'm³', categoria: 'Serviços' },
                ];
                onCalcular('Base Granular', materiais);
                setComprimento(''); setLargura('');
            };
            return (
                <FormCard title="2. Base Granular" onCalcular={calcular}>
                    <div className="grid md:grid-cols-2 lg:grid-cols-4 gap-4">
                        <input type="number" value={comprimento} onChange={e => setComprimento(e.target.value)} placeholder="Comprimento (m)" className="w-full border-gray-300 rounded-md p-2 shadow-sm focus:ring-red-800 focus:border-red-800" />
                        <input type="number" value={largura} onChange={e => setLargura(e.target.value)} placeholder="Largura (m)" className="w-full border-gray-300 rounded-md p-2 shadow-sm focus:ring-red-800 focus:border-red-800" />
                        <input type="number" value={espessura} onChange={e => setEspessura(e.target.value)} placeholder="Espessura (m)" className="w-full border-gray-300 rounded-md p-2 shadow-sm focus:ring-red-800 focus:border-red-800" />
                        <select value={material} onChange={e => setMaterial(e.target.value)} className="w-full border-gray-300 rounded-md p-2 bg-white shadow-sm focus:ring-red-800 focus:border-red-800">
                            <option value="rachao">Rachão</option>
                            <option value="brita">Brita Graduada</option>
                        </select>
                    </div>
                </FormCard>
            );
        }

        // --- Páginas ---
        const PageWrapper = ({ children, ultimoAdicionado, setUltimoAdicionado }) => (
            <div className="relative">
                <div className="animate-fade-in">{children}</div>
                <ResumoRecente item={ultimoAdicionado} onClose={() => setUltimoAdicionado(null)} />
            </div>
        );
        const DrenagemPage = (props) => (<PageWrapper {...props}><RedeDrenagemForm onCalcular={props.onCalcular} /><CaixaPassagemForm onCalcular={props.onCalcular} /><CaixaColetoraForm onCalcular={props.onCalcular} /></PageWrapper>);
        const PavimentacaoPage = (props) => (<PageWrapper {...props}><MeioFioForm onCalcular={props.onCalcular} /><CalcadaConcretoForm onCalcular={props.onCalcular} /><CalcadaIntertravadoForm onCalcular={props.onCalcular} /></PageWrapper>);
        const EstruturasPage = (props) => (<PageWrapper {...props}><AcoForm onCalcular={props.onCalcular} /><AlvenariaForm onCalcular={props.onCalcular} /></PageWrapper>);
        const ServicosPage = (props) => (<PageWrapper {...props}><EscavacaoForm onCalcular={props.onCalcular} /><BaseGranularForm onCalcular={props.onCalcular} /></PageWrapper>);

        function ResumoPage({ resumo, onExportPDF, onExportXLSX, onClear }) {
            const temMateriais = Object.keys(resumo).length > 0;
            const materiaisAgrupados = Object.values(resumo).reduce((acc, mat) => {
                const categoria = mat.categoria || 'Outros';
                if (!acc[categoria]) { acc[categoria] = []; }
                acc[categoria].push(mat);
                return acc;
            }, {});

            return (
                <div className="animate-fade-in">
                    <div className="flex justify-between items-center mb-6">
                        <h2 className="text-2xl font-bold text-gray-800">Resumo Geral</h2>
                        {temMateriais && (<button onClick={onClear} className="flex items-center bg-red-100 hover:bg-red-200 text-red-700 font-semibold py-2 px-4 rounded-lg shadow-sm text-sm transition-all"><IconeLixeira /> Limpar Tudo</button>)}
                    </div>
                    {temMateriais ? (
                        <div className="space-y-6">
                            {Object.entries(materiaisAgrupados).map(([categoria, materiais]) => (
                                <div key={categoria} className="bg-white border border-gray-200 rounded-xl shadow-sm">
                                    <h3 className="font-bold text-lg text-gray-700 p-4 border-b">{categoria}</h3>
                                    <div className="divide-y divide-gray-200">
                                        {materiais.map(({ nome, quantidade, unidade }) => (
                                            <div key={nome} className="grid grid-cols-3 items-center p-4">
                                                <span className="col-span-2 md:col-span-1 text-gray-800">{nome}</span>
                                                <span className="text-right font-mono text-gray-600">{quantidade.toFixed(2)}</span>
                                                <span className="text-right text-gray-500">{unidade}</span>
                                            </div>
                                        ))}
                                    </div>
                                </div>
                            ))}
                            <div className="mt-6 grid grid-cols-1 md:grid-cols-2 gap-4">
                                 <button onClick={onExportPDF} className="w-full flex items-center justify-center bg-red-800 hover:bg-red-900 text-white py-3 rounded-xl font-bold transition-transform transform hover:scale-[1.02]">
                                    <IconePDF /> Gerar Relatório PDF
                                </button>
                                <button onClick={onExportXLSX} className="w-full flex items-center justify-center bg-gray-800 hover:bg-gray-900 text-white py-3 rounded-xl font-bold transition-transform transform hover:scale-[1.02]">
                                    <IconePlanilha /> Gerar Excel
                                </button>
                            </div>
                        </div>
                    ) : (
                        <div className="text-center py-16 px-4 bg-gray-50 rounded-xl border-2 border-dashed">
                            <IconeResumo className="mx-auto h-12 w-12 text-gray-400" />
                            <h3 className="mt-2 text-lg font-medium text-gray-900">Nenhum material calculado</h3>
                            <p className="mt-1 text-sm text-gray-500">Comece adicionando cálculos nas outras abas.</p>
                        </div>
                    )}
                </div>
            );
        }

        // --- Componente Principal (App) ---
        function App() {
            const [activeTab, setActiveTab] = useState('info');
            const [resumoMateriais, setResumoMateriais] = useState({});
            const [infoObra, setInfoObra] = useState({ os: '', descricao: '', encarregado: '', endereco: '' });
            const [notificacao, setNotificacao] = useState('');
            const [ultimoAdicionado, setUltimoAdicionado] = useState(null);

            const handleClearResumo = () => {
                if (confirm('Tem certeza que deseja limpar todos os materiais do resumo?')) {
                    setResumoMateriais({});
                    showNotificacao('Resumo limpo com sucesso!', 'success');
                }
            }

            const showNotificacao = (mensagem, tipo) => {
                setNotificacao({ mensagem, tipo });
                setTimeout(() => setNotificacao(''), 3000);
            }

            const handleCalcular = (origem, materiais) => {
                setResumoMateriais(prevResumo => {
                    const novoResumo = { ...prevResumo };
                    materiais.forEach(mat => {
                        if (novoResumo[mat.nome]) {
                            novoResumo[mat.nome].quantidade += mat.quantidade;
                        } else {
                            novoResumo[mat.nome] = { ...mat };
                        }
                    });
                    return novoResumo;
                });
                setUltimoAdicionado({ origem, materiais });
                showNotificacao(`Itens de '${origem}' adicionados!`, 'success');
            };

            const handleExportXLSX = () => {
                if (typeof window.XLSX === 'undefined') { showNotificacao('Biblioteca de exportação não carregada.', 'error'); return; }
                const header = [["O.S:", infoObra.os], ["Encarregado:", infoObra.encarregado], ["Serviço:", infoObra.descricao], ["Endereço:", infoObra.endereco], []];
                const dadosParaExportar = Object.values(resumoMateriais).map(({ categoria, nome, quantidade, unidade }) => ({
                    'Categoria': categoria, 'Material/Serviço': nome, 'Quantidade': parseFloat(quantidade.toFixed(2)), 'Unidade': unidade,
                }));
                const ws = XLSX.utils.aoa_to_sheet(header);
                XLSX.utils.sheet_add_json(ws, dadosParaExportar, { origin: "A6" });
                const wb = XLSX.utils.book_new();
                XLSX.utils.book_append_sheet(wb, ws, 'Resumo_Geral');
                XLSX.writeFile(wb, `Memoria_Calculo_${infoObra.os || 'Geral'}.xlsx`);
            };

            const handleExportPDF = () => {
                if (typeof window.jspdf === 'undefined' || typeof window.jspdf.jsPDF === 'undefined') { showNotificacao('Biblioteca PDF não carregada.', 'error'); return; }
                const { jsPDF } = window.jspdf;
                const doc = new jsPDF();
                const tableData = Object.values(resumoMateriais).map(m => [m.categoria, m.nome, m.quantidade.toFixed(2), m.unidade]);
                const dataFormatada = new Date().toLocaleString('pt-BR');
                doc.addImage("https://cdn-icons-png.flaticon.com/512/2760/2760298.png", 'PNG', 15, 10, 20, 20);
                doc.setFontSize(20); doc.text("Memória de Cálculo de Materiais", 40, 22);
                doc.setFontSize(10);
                doc.text(`O.S: ${infoObra.os || 'Não especificada'}`, 15, 40);
                doc.text(`Encarregado: ${infoObra.encarregado || 'Não especificado'}`, 15, 45);
                doc.text(`Serviço: ${infoObra.descricao || 'Não especificado'}`, 15, 50);
                doc.text(`Endereço: ${infoObra.endereco || 'Não especificado'}`, 15, 55);
                doc.autoTable({ startY: 65, head: [['Categoria', 'Material/Serviço', 'Quantidade', 'Unidade']], body: tableData, theme: 'striped', headStyles: { fillColor: [128, 0, 0] } });
                const pageCount = doc.internal.getNumberOfPages();
                for (let i = 1; i <= pageCount; i++) {
                    doc.setPage(i);
                    doc.setFontSize(8);
                    doc.text(`Relatório gerado por Diretas App em ${dataFormatada}`, 15, doc.internal.pageSize.height - 10);
                    doc.text(`Página ${i} de ${pageCount}`, doc.internal.pageSize.width - 35, doc.internal.pageSize.height - 10);
                }
                doc.save(`Relatorio_OS_${infoObra.os || 'Geral'}.pdf`);
            };

            const pageProps = {
                onCalcular: handleCalcular,
                ultimoAdicionado,
                setUltimoAdicionado
            };

            const renderContent = () => {
                switch (activeTab) {
                    case 'info': return <InfoObraPage info={infoObra} setInfo={setInfoObra} />;
                    case 'drenagem': return <DrenagemPage {...pageProps} />;
                    case 'pavimentacao': return <PavimentacaoPage {...pageProps} />;
                    case 'estruturas': return <EstruturasPage {...pageProps} />;
                    case 'servicos': return <ServicosPage {...pageProps} />;
                    case 'resumo': return <ResumoPage resumo={resumoMateriais} onExportPDF={handleExportPDF} onExportXLSX={handleExportXLSX} onClear={handleClearResumo}/>;
                    default: return <InfoObraPage info={infoObra} setInfo={setInfoObra} />;
                }
            };

            const TabButton = ({ id, label, icon }) => (
                <button onClick={() => setActiveTab(id)} className={`flex-1 flex items-center justify-center p-4 font-bold border-b-4 transition-all duration-300 text-sm md:text-base ${activeTab === id ? 'border-red-800 text-gray-900' : 'border-transparent text-gray-500 hover:bg-gray-100 hover:text-gray-800'}`}>
                    {icon} {label}
                </button>
            );

            return (
                <main className="min-h-screen bg-gray-100 p-4 sm:p-6 lg:p-8 font-sans">
                    <div className="max-w-5xl mx-auto">
                        <header className="flex items-center space-x-4 mb-8">
                            <div className="bg-gray-800 p-3 rounded-xl shadow-lg">
                                <IconeCapacete />
                            </div>
                            <div>
                                <h1 className="text-4xl font-bold text-gray-800">Diretas</h1>
                                <p className="text-gray-500">Memória de Cálculo para Obras</p>
                            </div>
                        </header>

                        <div className="bg-white rounded-t-xl shadow-md flex flex-wrap overflow-hidden border-b border-gray-200">
                            <TabButton id="info" label="Info. Obra" icon={<IconeInfo />} />
                            <TabButton id="drenagem" label="Drenagem" icon={<IconeDrenagem />} />
                            <TabButton id="pavimentacao" label="Pavimentação" icon={<IconePavimentacao />} />
                            <TabButton id="estruturas" label="Estruturas" icon={<IconeEstruturas />} />
                            <TabButton id="servicos" label="Serviços" icon={<IconeServicos />} />
                            <TabButton id="resumo" label="Resumo" icon={<IconeResumo />} />
                        </div>

                        <div className="bg-gray-50 p-4 sm:p-6 rounded-b-xl shadow-lg">
                            {renderContent()}
                        </div>
                    </div>

                    {notificacao && (
                        <div className={`fixed top-5 right-5 p-4 rounded-lg shadow-xl text-white animate-fade-in z-50 ${notificacao.tipo === 'success' ? 'bg-green-500' : 'bg-red-500'}`}>
                            {notificacao.mensagem}
                        </div>
                    )}
                </main>
            );
        }

        const container = document.getElementById('root');
        const root = ReactDOM.createRoot(container);
        root.render(<App />);

    </script>
</body>
</html>
